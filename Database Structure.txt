CoMET Table List, Description and SQL Composition

Table: notes 
Description: this table will store notes about specific members and replies to notes
SQL: CREATE TABLE IF NOT EXISTS `notes` (
	  `note` text NOT NULL,
	  `threadID` int(11) NOT NULL,
	  `parentID` int(11) DEFAULT NULL,
	  `cardNo` int(6) NOT NULL,
	  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE 				CURRENT_TIMESTAMP,
	  `userID` tinyint(3) NOT NULL,
	  PRIMARY KEY (`threadID`),
	  KEY `parentID` (`parentID`,`cardNo`)
	)

Table: payments
Description: this table stores equity payments to facilitate tracking, reporting, and notification
SQL: CREATE TABLE IF NOT EXISTS `payments` (
	  `paymentID` int(11) NOT NULL AUTO_INCREMENT,
	  `memo` text,
	  `amount` decimal(6,2) NOT NULL,
	  `date` date NOT NULL,
	  `reference` varchar(12) NOT NULL,
	  `userID` tinyint(3) NOT NULL,
	  `cardNo` int(6) NOT NULL,
	  PRIMARY KEY (`paymentID`),
	  KEY `cardNo` (`cardNo`)
	)

Table: raw_details
Description: Table with every iteration of changes in details for members. Helps to create versioning and allows users to revert to old addresses, information.
SQL: CREATE TABLE IF NOT EXISTS `raw_details` (
 	 `cardNo` int(6) NOT NULL,
	  `address1` varchar(50) NOT NULL,
	  `address2` int(50) DEFAULT NULL,
	  `phone` varchar(18) NOT NULL,
	  `city` varchar(30) NOT NULL,
	  `state` varchar(3) NOT NULL,
	  `zip` varchar(10) NOT NULL,
	 `email` varchar(50) NOT NULL,
	  `nextPayment` date DEFAULT NULL,
	  `paymentPlan` int(2) NOT NULL,
	  `modified` datetime NOT NULL,
	  `joined` date NOT NULL,
	  `sharePrice` decimal(6,2) NOT NULL,
	  `userID` int(3) NOT NULL,
	  PRIMARY KEY (`cardNo`,`modified`,`userID`),
	  KEY `cardNo` (`cardNo`,`zip`,`nextPayment`,`modified`)
	)

Table: lists
Description: Table with a list of possible email lists to be subscribed to. Used for mass mailing of newsletter and other information.
SQL: CREATE TABLE IF NOT EXISTS `lists` (
 	 `listID` int(3) NOT NULL AUTO_INCREMENT,
 	 `description` varchar(256) NOT NULL,
 	 `active` tinyint(1) NOT NULL,
 	 `userID` int(3) NOT NULL,
 	 `modified` datetime NOT NULL,
	  PRIMARY KEY (`listID`)
	)

Table: subscriptions
Description: Table with a list of card numbers and subscriptions. Used to subscribe members to various lists.
SQL: CREATE TABLE IF NOT EXISTS `subscriptions` (
	  `cardNo` int(6) NOT NULL,
	  `listID` int(3) NOT NULL,
	  `userID` int(3) NOT NULL,
	  `modified` datetime NOT NULL,
	  PRIMARY KEY (`cardNo`,`listID`)
	)

Table: raw_owners
Description: Table with a list of basic details used with Fannie and IS4C. Used to with versioning as well to allow rollbacks.
SQL: CREATE TABLE IF NOT EXISTS `raw_owners` (
	  `cardNo` int(6) NOT NULL,
	  `personNum` tinyint(1) NOT NULL,
	  `firstName` varchar(50) NOT NULL,
	  `lastName` varchar(50) NOT NULL,
	  `discount` tinyint(2) DEFAULT NULL,
	  `memType` tinyint(2) NOT NULL,
	  `staff` tinyint(2) NOT NULL,
	  `chargeOk` tinyint(1) NOT NULL,
	  `writeChecks` tinyint(1) NOT NULL,
	  `userID` int(3) NOT NULL,
	  `modified` datetime NOT NULL,
	  PRIMARY KEY (`cardNo`,`userID`,`modified`)
	)

Table: users
Description: Table users to tag changes and identify who changed fields and create authorization levels.
SQL: CREATE TABLE IF NOT EXISTS `users` (
	  `user` varchar(20) NOT NULL,
	  `password` char(32) NOT NULL,
	  `level` int(2) NOT NULL,
	  `userID` int(3) NOT NULL AUTO_INCREMENT,
	  PRIMARY KEY (`userID`)
	)

Table: actionlog
Description: Table to track every SQL insert/update query run against the database.
SQL: CREATE TABLE IF NOT EXISTS `actionlog` (
	  `actionID` int(11) NOT NULL AUTO_INCREMENT,
	  `action` text NOT NULL,
	  `userID` int(3) NOT NULL,
	  `runtime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE 	CURRENT_TIMESTAMP,
	  PRIMARY KEY (`actionID`)
	)

View: details
Description: View of the most recent member details. Creates ability to rollback to previous states.
SQL: CREATE VIEW `details` AS 
	SELECT 
		`raw_details`.`cardNo` AS `cardNo`,
		`raw_details`.`address1` AS `address1`,
		`raw_details`.`address2` AS `address2`,
		`raw_details`.`phone` AS `phone`,
		`raw_details`.`city` AS `city`,
		`raw_details`.`state` AS `state`,
		`raw_details`.`zip` AS `zip`,
		`raw_details`.`email` AS `email`,
		`raw_details`.`nextPayment` AS `nextPayment`,
		`raw_details`.`sharePrice` AS `sharePrice`,
		`raw_details`.`paymentPlan` AS `paymentPlan`,
		`raw_details`.`userID` AS `userID`,
		`raw_details`.`modified` AS `modified`,
		`raw_details`.`joined` AS `joined` 
	FROM `raw_details` 
	GROUP BY `raw_details`.`cardNo`,`raw_details`.`modified` 
	HAVING MAX(`raw_details`.`modified`)


View: owners
Description: View of the most recent member owner info. Creates ability to rollback to previous states.
SQL: CREATE VIEW `owners` AS 
	SELECT 
		`raw_owners`.`cardNo` AS `cardNo`,
		`raw_owners`.`personNum` AS `personNum`,
		`raw_owners`.`firstName` AS `firstName`,
		`raw_owners`.`lastName` AS `lastName`,
		`raw_owners`.`discount` AS `discount`,
		`raw_owners`.`memType` AS `memType`,
		`raw_owners`.`staff` AS `staff`,
		`raw_owners`.`chargeOk` AS `chargeOk`,
		`raw_owners`.`writeChecks` AS `writeChecks`,
		`raw_owners`.`userID` AS `userID`,
		`raw_owners`.`modified` AS `modified` 
	FROM `raw_owners` 
	GROUP BY `raw_owners`.`cardNo`,`raw_owners`.`modified` 
	HAVING MAX(`raw_owners`.`modified`)
